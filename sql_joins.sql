USE sakila;

-- Lab SQL Joins
-- Challenge - Joining on multiple tables
-- 1. List the number of films per category.
SELECT name AS category,
COUNT(DISTINCT film_id) AS Number_of_films
FROM category AS c
LEFT JOIN film_category AS fc
ON c.category_id = fc.category_id
GROUP BY category;

-- 2. Retrieve the store ID, city, and country for each store. 
SELECT s.store_id,
c.city,
co.country
FROM store AS s
INNER JOIN address AS a 
ON s.address_id = a.address_id
INNER JOIN city AS c 
ON a.city_id = c.city_id
INNER JOIN country AS co 
ON c.country_id = co.country_id;


-- 3. Calculate the total revenue generated by each store in dollars. 
SELECT s.store_id AS store,
CONCAT('$', FORMAT(SUM(p.amount), 2)) AS total_revenue
FROM store AS s
INNER JOIN inventory AS i 
ON s.store_id = i.store_id
INNER JOIN rental AS r 
ON i.inventory_id = r.inventory_id
INNER JOIN payment AS p 
ON r.rental_id = p.rental_id
GROUP BY s.store_id;



-- 4.Determine the average running time of films for each category.
SELECT name AS category, 
AVG(length) AS average_duration
FROM film AS f
INNER JOIN film_category AS fc 
ON f.film_id = fc.film_id
INNER JOIN category AS c 
ON fc.category_id = c.category_id
GROUP BY c.category_id;


-- Bonus
-- 5.Identify the film categories with the longest average running time.
SELECT name AS category,
AVG(length) AS average_running_time
FROM category AS c
INNER JOIN film_category AS fc
ON c.category_id = fc.category_id
INNER JOIN film AS f
ON fc.film_id = f.film_id
GROUP BY category
ORDER BY AVG(length) DESC;


-- 6. Display the top 10 most frequently rented movies in descending order.
SELECT f.title AS movie, 
COUNT(*) AS rental_count
FROM film AS f
INNER JOIN inventory AS i 
ON f.film_id = i.film_id
INNER JOIN rental AS r 
ON i.inventory_id = r.inventory_id
GROUP BY movie
ORDER BY rental_count DESC
LIMIT 10;


-- 7. Determine if "Academy Dinosaur" can be rented from Store 1.
SELECT 'Academy Dinosaur' AS movie,
	CASE 
		WHEN COUNT(*) > 0 THEN 'Yes' 
        ELSE 'No' 
        END AS available
FROM film AS f
INNER JOIN inventory AS i 
ON f.film_id = i.film_id 
INNER JOIN store AS s 
ON i.store_id = s.store_id
WHERE f.title = 'Academy Dinosaur' AND s.store_id = 1;

-- 8.Provide a list of all distinct film titles, along with their availability status in the inventory. Include a column indicating whether each title is 'Available' or 'NOT available.' Note that there are 42 titles that are not in the inventory, and this information can be obtained using a CASE statement combined with IFNULL."
SELECT title AS film_title,
IFNULL(
	CASE 
		WHEN COUNT(i.inventory_id) > 0 THEN 'Available' 
        ELSE 'Not available' 
        END, 'Not available') AS availability_status
FROM film AS f
LEFT JOIN inventory AS i 
ON f.film_id = i.film_id
GROUP BY f.title;









